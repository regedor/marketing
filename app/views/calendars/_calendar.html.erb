<div class="flex justify-between items-center mb-4">
  <%= link_to "Previous Year", params.permit(:start_date, calendar_ids: []).merge(start_date: @start_date.prev_year), class: "text-blue-500 hover:underline" %>
  <%= link_to "Previous", params.permit(:start_date, calendar_ids: []).merge(start_date: @start_date.prev_month), class: "text-blue-500 hover:underline" %>
  <div class="text-lg font-bold text-gray-700">
    <%= @start_date.strftime("%B %Y") %>
  </div>
  <%= link_to "Next", params.permit(:start_date, calendar_ids: []).merge(start_date: @start_date.next_month), class: "text-blue-500 hover:underline" %>
  <%= link_to "Next Year", params.permit(:start_date, calendar_ids: []).merge(start_date: @start_date.next_year), class: "text-blue-500 hover:underline" %>
</div>

<div class="flex">
  <div id="calendar-div" class="w-3/4">
    <%= month_calendar(events: @posts, attribute: :publish_date, previous_label: nil, next_label: nil) do |date, posts| %>
      <div class="droppable border p-2 relative calendar-box" data-date="<%= date %>">
        <div class="date text-sm font-bold text-gray-700">
          <%= date.day %> +
          <div class="menu hidden absolute left-0 border bg-white border-gray-300 shadow-md rounded-md max-h-32 overflow-y-auto">
            <ul>
              <% @calendars.each do |calendar| %>
                <li>
                  <%= link_to calendar.name, new_calendar_post_path(calendar,date:date), class: "block block px-4 py-2 text-gray-700 hover:bg-yellow-400" %>
                </li>
              <% end %>
            </ul>
          </div>
        </div>
        <div class="posts-container overflow-y-auto">
          <% posts.each do |post| %>
            <%= link_to post.title, calendar_post_path(post.calendar, post), class: "Btn-primary mt-2 bg-blue-500 draggable", data: { post_id: post.id, calendar_id: post.calendar.id }  %>
          <% end %>
        </div>
      </div>
    <% end %>
  </div>
  <div class="p-4 w-1/4 ">
    <div id="post-info" class="Container text-gray-600">
      <div id="no-info">
        <span> Select a Post</span>
      </div>
      <div id="have-info" class="hidden">
        <div>
          <strong>Publish Date</strong>
          <span id="publish_date"></span>
        </div>
        <div>
          <strong>Calendar</strong>
          <span id="calendar"></span>
        </div>
        <div>
          <strong>Author</strong>
          <span id="author"></span>
        </div>
        <div>
          <strong>Status</strong>
          <span id="status"></span>
        </div>
        <div>
          <strong>Design Idea</strong>
          <span id="design_idea"></span>
        </div>
        <div>
          <strong>Copy</strong>
          <span id="copy"></span>
        </div>
      </div>
    </div>
  </div>
</div>

<script>
  $(document).ready(function() {
    function build_axios() {
      axios.defaults.withCredentials = true;
      const csrfToken = document.querySelector('meta[name="csrf-token"]').getAttribute('content');
      axios.defaults.headers.common['X-CSRF-Token'] = csrfToken;
    }

    $(".draggable").draggable({
      cursor: "move",
      revert: "invalid",
      helper: 'clone'
    });
    function reset_element(draggedElement) {
      draggedElement.removeClass("ui-draggable-handle");
      draggedElement.removeClass("ui-draggable");
      draggedElement.removeAttr("style")
      draggedElement.css("position","relative")
    }
    $(".droppable").droppable({
      accept: ".draggable",
      drop: function(event, ui) {
        const draggedElement = ui.draggable;
        const postId = draggedElement.data("post-id");
        const calendarId = draggedElement.data("calendar-id");
        const newDate = $(this).data("date");
        const url = `/calendars/${calendarId}/posts/${postId}/update_day?date=${newDate}`;
        build_axios()
        axios.patch(url)
        .then((response) => {
          draggedElement.detach();
          reset_element(draggedElement)
          $(this).find(".posts-container").append(draggedElement);
        })
        .catch((error) => {
          reset_element(draggedElement)
        })
      }
    });
    $(".date").hover(
      function() {
        $(this).find(".menu").removeClass("hidden"); // Show the menu
      },
      function() {
        $(this).find(".menu").addClass("hidden"); // Hide the menu
      }
    );
    
    function fill_post_info() {
      const postId = $(this).data("post-id");
      const calendarId = $(this).data("calendar-id");
      const url = `/calendars/${calendarId}/posts/${postId}/json`
      $('#no-info').text('...');
      build_axios()
      axios.get(url)
      .then(response => {
        data = response.data.post
        $('#design_idea').text(data.design_idea);
        $('#calendar').text(data.calendar);
        $('#author').text(data.author);
        $('#status').text(data.status);
        $('#copy').text(data.perspective_default_copy);
        $('#publish_date').text(data.publish_date);
        $('#no-info').addClass('hidden');
        $('#have-info').removeClass('hidden');
      })
      .catch(err => {
        $('#no-info').text('Error');
      })
    }

    function clear_post_info() {
      
        $('#design_idea').text('');
        $('#calendar').text('');
        $('#author').text('');
        $('#status').text('');
        $('#copy').text('');
        $('#publish_date').text('');
        $('#no-info').text('Select a Post');
        $('#no-info').removeClass('hidden');
        $('#have-info').addClass('hidden');

    }

    $('.draggable').hover(fill_post_info, clear_post_info)
  })
</script>